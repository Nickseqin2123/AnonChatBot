import asyncio
import logging

from aiogram import Dispatcher, Bot
from aiogram.filters.command import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.config import cfg
from requestsdb.user import getUserLink, setUser, searchUser
from keyboards.inlines import inline
from anonym.replly import router as reply_router


dp = Dispatcher()
dp.include_router(reply_router)


class MessageState(StatesGroup):
    message = State()
    

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    msg_args = message.text.split(maxsplit=1)

    if len(msg_args) > 1:
        await state.set_state(MessageState.message)
        
        hash_other = msg_args[-1]
        await state.update_data(hash_person=hash_other)
        
        await message.answer(
            text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ'
        )
    else:
        user_id = message.from_user.id
        
        user = await getUserLink(user_id)
        
        if isinstance(user, bool):
            await setUser(user_id)
        
        user = await getUserLink(user_id)
        
        await message.answer(
            text=f'''
üåü –í—Ä–µ–º—è –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üëâ t.me/sipsbe_bot?start={user}

–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ Telegram, TikTok –∏–ª–∏ Instagram (stories), —á—Ç–æ–±—ã –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–æ–≥–ª–∏ —Å–º–µ–ª–æ –ø–∏—Å–∞—Ç—å –≤–∞–º üí¨. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è!'''
        )


@dp.message(MessageState.message)
async def gt_message(message: Message, state: FSMContext):
    data = await state.get_data()
    person = data['hash_person']
    
    await state.clear()
    user_id = await searchUser(person)
    
    if message.text:
        msg = f'–¢–µ–±–µ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n{message.text}'
        await message.bot.send_message(chat_id=user_id, text=msg, reply_markup=await inline(
            –û—Ç–≤–µ—Ç–∏—Ç—å={'id': message.from_user.id, 'type': 'reply', 'reply_id': message.message_id}
            ))
    else:
        cap = '–ö —Ç–µ–±–µ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!'
        await message.bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id, caption=cap, reply_markup=await inline(
            –û—Ç–≤–µ—Ç–∏—Ç—å={'id': message.from_user.id, 'type': 'reply', 'reply_id': message.message_id}
            ))
    
    await message.answer(
            text='–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
    )
    

async def main():
    bot = Bot(token=cfg.token)
    logging.basicConfig(level=logging.INFO)
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())